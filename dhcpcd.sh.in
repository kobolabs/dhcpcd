#!/bin/sh
# dhcpcd - DHCP client daemon
# Copyright 2006-2008 Roy Marples <roy@marples.name>
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

do_hooks()
{
	local x= r=0
	for x in @SYSCONFDIR@/dhcpcd-"$1"-hook.d/* @SYSCONFDIR@/dhcpcd-"$1"-hook; do
		if [ -e "${x}" ]; then
			. "${x}"
			r=$((${r} + $?))
		fi
	done
	return ${r}
}

save_conf()
{
	if [ -e "$1" ]; then
		rm -f "$1"-pre."${interface}"
		mv -f "$1" "$1"-pre."${interface}"
	fi
}

restore_conf()
{
	[ -e "$1"-pre."${interface}" ] || return 1
	rm -f "$1"
	mv -f "$1"-pre."${interface}" "$1"
}

make_resolv_conf()
{
	if [ -z "${new_domain_name_servers}" -a \
		-z "${new_domain_name}" -a \
		-z "${new_domain_search}" ]; then
		return 0
	fi
	local x= conf="${signature}\n"
	if [ -n "${new_domain_search}" ]; then
		conf="${conf}search ${new_domain_search}\n"
	elif [ -n "${new_domain_name}" ]; then
		conf="${conf}search ${new_domain_name}\n"
	fi
	for x in ${new_domain_name_servers}; do
		conf="${conf}nameserver ${x}\n"
	done
	if type resolvconf >/dev/null 2>&1; then
		printf "${conf}" | resolvconf -a "${interface}"
	else
		save_conf /etc/resolv.conf
		printf "${conf}" > /etc/resolv.conf
	fi
}

restore_resolv_conf()
{
	if type resolvconf >/dev/null 2>&1; then
		resolvconf -d "${interface}" -f
	else
		restore_conf /etc/resolv.conf || return 0
	fi
}

need_hostname()
{
	case "$(hostname)" in
		""|"(none)"|localhost) return 0;;
	esac
	return 1
}

lookup_hostname()
{
	if type host >/dev/null 2>&1; then
		host "${new_ip_address}" | \
		sed 's/.* domain name pointer \(.*\)./\1/'
	elif type dig >/dev/null 2>&1; then
		dig +short -x "${new_ip_address}" | sed 's/\.$//'
	else
		return 1
	fi
}

set_hostname()
{
	if [ -n "${old_host_name}" ] || need_hostname; then
		local name="${new_host_name}"
		[ -z "${name}" ] && name="$(lookup_hostname)"
		[ -n "${name}" ] && hostname "${name}"
	fi
}

run_test()
{
	env | grep "^\(interface\|reason\)="
	env | grep "^\(new_\|old_\)" | sort
}

signature="# Generated by dhcpcd for ${interface}"

# We should do something with exit codes really
do_hooks enter
case "${reason}" in
	TEST)
		run_test
		;;
	BOUND|INFORM|REBIND|REBOOT|RENEW|TIMEOUT)
		make_resolv_conf
		set_hostname
		;;
	EXPIRE|FAIL|IPV4LL|RELEASE|STOP)
		restore_resolv_conf
		;;
	*)
		echo "unsupported reason ${reason}" >&2
		false
		;;
esac
do_hooks exit
