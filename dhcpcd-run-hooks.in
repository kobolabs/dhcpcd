#!/bin/sh
# dhcpcd client configuration script 

# Handy variables functions for our hooks to use
signature_base="# Generated by dhcpcd for "
signature="${signature_base}${interface}"
signature_base_end="# End of dhcpcd configuration for "
signature_end="${signature_base_end}${interface}"

# Clean a configuration file of our current signature and stale ones
clean_conf()
{
	local cf=$1 cft="$1.tmp" x= m1= m2=

	if [ -f "${cf}" ]; then
		# Remove our old entry
		m1="^${signature}$"
		m2="^${signature_end}$"
		rm -f "${cft}" "${cft}.tmp"
		sed "/${m1}/,/${m2}/d" "${cf}" > "${cft}"
		# Remove stale entries
		m1="^${siganture_base} "
		for x in $(sed -n "s/${m1}//p" "${cft}"); do
			if [ ! -s /var/run/dhcpcd-${x}.pid ]; then
				m1="^${signtaure_base}${x}$"
				m2="^${signature_base_end} ${x}$"
				sed "/${m1}/,/${m2}/d" "${cft}" >"${cft}".tmp
				mv -f "${cft}".tmp "${cft}"
			fi
		done
		# If files are identical then don't replace and return 1
		# to show that no cleaning took place
		if type cmp >/dev/null 2>&1; then
			cmp -s "${cf}" "${cft}"
		elif type diff >/dev/null 2>&1; then
			diff -q "${cf}" "${cft}" >/dev/null
		else
			false
		fi
		if [ $? -eq 0 ]; then
			rm -f "${cft}"
			return 1
		fi
		mv -f "${cft}" "${cf}"
		return 0
	fi
}

# Append our config to the end of a file, surrouned by our signature
append_conf()
{
	echo "${signature}" >> "$1"
	echo "$2" >> "$1"
	echo "${signature_end}" >> "$1"
}

# Prepend our config to the start of a file, surrouned by our signature
prepend_conf()
{
	rm -f "$1.${interface}"
	echo "${signature}" > "$1.${interface}"
	echo "$2" >> "$1.${interface}"
	echo "${signature_end}" >> "$1.${interface}"
	cat "$1" >> "$1.${interface}"
	mv -f "$1.${interface}" "$1"
}

# Save a config file
save_conf()
{
	if [ -f "$1" ]; then
		rm -f "$1"-pre."${interface}"
		mv -f "$1" "$1"-pre."${interface}"
	fi
}

# Restore a config file
restore_conf()
{
	[ -f "$1"-pre."${interface}" ] || return 1
	rm -f "$1"
	mv -f "$1"-pre."${interface}" "$1"
}


# We source each script into this one so that scripts run earlier can
# remove variables from the environment so later scripts don't see them.
# Thus, the user can create their dhcpcd.hook script to configure
# /etc/resolv.conf how they want and stop the system scripts ever updating it.
for hook in \
	@SYSCONFDIR@/dhcpcd.enter-hook \
	@HOOKDIR@/* \
	@SYSCONFDIR@/dhcpcd.exit-hook
do
	for skip in ${skip_hooks}; do
		case "${hook}" in
			"${skip}")			continue 2;;
			*/[0-9][0-9]"-${skip}")		continue 2;;
			*/[0-9][0-9]"-${skip}.sh")	continue 2;;
		esac
	done
	if [ -f "${hook}" ]; then
		. "${hook}"
	fi
done
